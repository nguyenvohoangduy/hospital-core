{"filter":false,"title":"APIController.php","tooltip":"/app/Http/Controllers/Api/V1/APIController.php","undoManager":{"mark":0,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":192,"column":1},"action":"insert","lines":["<?php","","namespace App\\Http\\Controllers\\API\\V1;","","use App\\Http\\Controllers\\Controller;","use Illuminate\\Http\\Response as IlluminateResponse;","use Response;","","/**"," * Base API Controller."," */","class APIController extends Controller","{","    /**","     * default status code.","     *","     * @var int","     */","    protected $statusCode = 200;","","    /**","     * get the status code.","     *","     * @return statuscode","     */","    public function getStatusCode()","    {","        return $this->statusCode;","    }","","    /**","     * set the status code.","     *","     * @param [type] $statusCode [description]","     *","     * @return statuscode","     */","    public function setStatusCode($statusCode)","    {","        $this->statusCode = $statusCode;","","        return $this;","    }","","    /**","     * Respond.","     *","     * @param array $data","     * @param array $headers","     *","     * @return \\Illuminate\\Http\\JsonResponse","     */","    public function respond($data, $headers = [])","    {","        return response()->json($data, $this->getStatusCode(), $headers);","    }","","    /**","     * respond with pagincation.","     *","     * @param Paginator $items","     * @param array     $data","     *","     * @return \\Illuminate\\Http\\JsonResponse","     */","    public function respondWithPagination($items, $data)","    {","        $data = array_merge($data, [","            'paginator' => [","                'total_count'  => $items->total(),","                'total_pages'  => ceil($items->total() / $items->perPage()),","                'current_page' => $items->currentPage(),","                'limit'        => $items->perPage(),","             ],","        ]);","","        return $this->respond($data);","    }","","    /**","     * Respond Created.","     *","     * @param string $message","     *","     * @return \\Illuminate\\Http\\JsonResponse","     */","    public function respondCreated($data)","    {","        return $this->setStatusCode(201)->respond([","            'data' => $data,","        ]);","    }","","    /**","     * Respond Created with data.","     *","     * @param string $message","     *","     * @return \\Illuminate\\Http\\JsonResponse","     */","    public function respondCreatedWithData($data)","    {","        return $this->setStatusCode(201)->respond($data);","    }","","    /**","     * respond with error.","     *","     * @param $message","     *","     * @return \\Illuminate\\Http\\JsonResponse","     */","    public function respondWithError($message)","    {","        return $this->respond([","                'error' => [","                    'message'     => $message,","                    'status_code' => $this->getStatusCode(),","                ],","            ]);","    }","","    /**","     * responsd not found.","     *","     * @param string $message","     *","     * @return \\Illuminate\\Http\\JsonResponse","     */","    public function respondNotFound($message = 'Not Found')","    {","        return $this->setStatusCode(IlluminateResponse::HTTP_NOT_FOUND)->respondWithError($message);","    }","","    /**","     * Respond with error.","     *","     * @param string $message","     *","     * @return \\Illuminate\\Http\\JsonResponse","     */","    public function respondInternalError($message = 'Internal Error')","    {","        return $this->setStatusCode(500)->respondWithError($message);","    }","","    /**","     * Respond with unauthorized.","     *","     * @param string $message","     *","     * @return \\Illuminate\\Http\\JsonResponse","     */","    protected function respondUnauthorized($message = 'Unauthorized')","    {","        return $this->setStatusCode(401)->respondWithError($message);","    }","","    /**","     * Respond with forbidden.","     *","     * @param string $message","     *","     * @return \\Illuminate\\Http\\JsonResponse","     */","    protected function respondForbidden($message = 'Forbidden')","    {","        return $this->setStatusCode(403)->respondWithError($message);","    }","","    /**","     * Respond with no content.","     *","     * @return \\Illuminate\\Http\\JsonResponse","     */","    protected function respondWithNoContent()","    {","        return $this->setStatusCode(204)->respond(null);","    }","","    /**Note this function is same as the below function but instead of responding with error below function returns error json","     * Throw Validation.","     *","     * @param string $message","     *","     * @return mix","     */","    public function throwValidation($message)","    {","        return $this->setStatusCode(422)","            ->respondWithError($message);","    }","}"],"id":1}]]},"ace":{"folds":[],"scrolltop":120,"scrollleft":0,"selection":{"start":{"row":11,"column":38},"end":{"row":11,"column":38},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1536024252147,"hash":"b77e04d5e3535463c13f1ca075482f267eb7d975"}